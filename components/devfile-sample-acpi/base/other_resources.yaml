apiVersion: v1
data:
  config: |-
    DB_USER=
    DB_PASSWORD=
    DB_HOST=
    DB_PORT=5432
    DB_NAME=
    DB_SSLMODE=disable
    DB_ENABLE_AUTO_MIGRATION=true
    GRPC_PORT=50051
    REST_PORT=3001
    PROMETHEUS_PORT=9090
    TLS_HOSTNAME_OVERRIDE=
    TLS_PATH=/etc/tls
    NO_AUTH=false
    LOG_LEVEL=info
    LOGS_API=false
    LOGS_TYPE=File
    LOGS_BUFFER_SIZE=32768
    LOGS_PATH=/logs
    S3_BUCKET_NAME=
    S3_ENDPOINT=
    S3_HOSTNAME_IMMUTABLE=false
    S3_REGION=
    S3_ACCESS_KEY_ID=
    S3_SECRET_ACCESS_KEY=
    S3_MULTI_PART_SIZE=5242880
kind: ConfigMap
metadata:
  name: tekton-results-api-config
---
apiVersion: v1
data:
  POSTGRES_DB: tekton-results
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: tekton-results-postgres
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-postgres
---
apiVersion: v1
data:
  POSTGRES_PASSWORD: YWRtaW4=
  POSTGRES_USER: YWRtaW4=
kind: Secret
metadata:
  name: tekton-results-postgres
type: Opaque
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: tekton-results-postgres
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-results-postgres
  serviceName: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tekton-results-postgres
        app.kubernetes.io/version: devel
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: tekton-results-postgres
        - secretRef:
            name: tekton-results-postgres
        image: bitnami/postgresql@sha256:23b9a21460fefdd83accd0f864e734c88bebc67c86ee752a97b77dd4843907f0
        name: postgres
        ports:
        - containerPort: 5432
          name: postgredb
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /bitnami/postgresql
          name: postgredb
  volumeClaimTemplates:
  - metadata:
      name: postgredb
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: tekton-results-postgres
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-postgres-service
spec:
  ports:
  - name: postgres
    port: 5432
    targetPort: 0
  selector:
    app.kubernetes.io/name: tekton-results-postgres
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/part-of: tekton-results
    app.kubernetes.io/version: devel
  name: tekton-results-api-service
spec:
  ports:
  - name: grpc
    port: 50051
    protocol: TCP
    targetPort: 50051
  - name: http-3001
    port: 3001
    protocol: TCP
    targetPort: 3001
  - name: prometheus
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app.kubernetes.io/name: tekton-results-api
status:
  loadBalancer: {}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    haproxy.router.openshift.io/hsts_header: max-age=63072000
    openshift.io/host.generated: "true"
  creationTimestamp: null
  labels:
    app.kubernetes.io/part-of: tekton-results
  name: tekton-results
spec:
  port:
    targetPort: http-3001
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: reencrypt
  to:
    kind: Service
    name: tekton-results-api-service
    weight: 100
  wildcardPolicy: None
status: {}
---
